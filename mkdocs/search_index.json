{
    "docs": [
        {
            "location": "/", 
            "text": "FindCursor\n\n\nQuickly find Sublime Text cursor(s).\n\n\n\n\nOverview\n\n\nSublime plugin to make finding and viewing the cursor(s) quick and easy.\n\n\nFeatures\n\n\n\n\nQuickly find your cursor(s) by making them highly visible.\n\n\nOn additional calls, either pan through cursors or iterate through cursors.", 
            "title": "About FindCursor"
        }, 
        {
            "location": "/#findcursor", 
            "text": "Quickly find Sublime Text cursor(s).", 
            "title": "FindCursor"
        }, 
        {
            "location": "/#overview", 
            "text": "Sublime plugin to make finding and viewing the cursor(s) quick and easy.", 
            "title": "Overview"
        }, 
        {
            "location": "/#features", 
            "text": "Quickly find your cursor(s) by making them highly visible.  On additional calls, either pan through cursors or iterate through cursors.", 
            "title": "Features"
        }, 
        {
            "location": "/installation/", 
            "text": "Installation\n\n\nInstalling FindCursor.\n\n\n\n\nPackage Control\n\n\nThe recommended way to install FindCursor is via \nPackage Control\n.  Package Control will install the correct branch on your system and keep it up to date.\n\n\n\n\n\n\nEnsure Package Control is installed.  Instructions are found \nhere\n.\n\n\n\n\n\n\nIn sublime, press \nctrl\n + \nshift\n + \np\n (Win, Linux) or \ncmd\n + \nshift\n + \np\n (OSX) to bring up the quick panel.  It will show a list of installable plugins.\n\n\n\n\n\n\nStart typing \nFindCursor\n, when you see it, select it.\n\n\n\n\n\n\nRestart to be sure everything is loaded proper.\n\n\n\n\n\n\nEnjoy!\n\n\n\n\n\n\nGit Cloning\n\n\n\n\nWarning\n\n\nThis is not the recommended way to install FindCursor for the casual user as it requires the user to know which branch to install, know how to use git, and \nwill not\n get automatically updated.\n\n\nIf you are forking for a pull request, this is the way to go, just replace the official repository with the link for your fork.\n\n\n\n\n\n\n\n\nQuit Sublime Text.\n\n\n\n\n\n\nOpen a terminal:\n\n\ncd /path/to/Sublime Text 3/Packages\ngit clone https://github.com/facelessuser/FindCursor.git FindCursor\n\n\n\n\n\n\n\n\n\n3 Restart Sublime Text.", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/#installation", 
            "text": "Installing FindCursor.", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/#package-control", 
            "text": "The recommended way to install FindCursor is via  Package Control .  Package Control will install the correct branch on your system and keep it up to date.    Ensure Package Control is installed.  Instructions are found  here .    In sublime, press  ctrl  +  shift  +  p  (Win, Linux) or  cmd  +  shift  +  p  (OSX) to bring up the quick panel.  It will show a list of installable plugins.    Start typing  FindCursor , when you see it, select it.    Restart to be sure everything is loaded proper.    Enjoy!", 
            "title": "Package Control"
        }, 
        {
            "location": "/installation/#git-cloning", 
            "text": "Warning  This is not the recommended way to install FindCursor for the casual user as it requires the user to know which branch to install, know how to use git, and  will not  get automatically updated.  If you are forking for a pull request, this is the way to go, just replace the official repository with the link for your fork.     Quit Sublime Text.    Open a terminal:  cd /path/to/Sublime Text 3/Packages\ngit clone https://github.com/facelessuser/FindCursor.git FindCursor    3 Restart Sublime Text.", 
            "title": "Git Cloning"
        }, 
        {
            "location": "/usage/", 
            "text": "User Guide\n\n\nConfiguration and usage of FindCursor.\n\n\n\n\nGetting Started\n\n\nFind cursor provides only one command, and it works best when bound to a shortcut.  Simply setup a \nkeymap\n and you are ready to go.  Though if you prefer, you can add commands in the command palette, or menus.\n\n\nCommand\n\n\n\n\nfind_cursor\n\n\n\n\nWhen the command is first invoked, all cursors will turn to block cursors and blink making them highly visible.  Subsequent invocations (if performed before timeout) will cycle through the cursors focusing them in the view.  The focus modes are iterative (the default) and pan mode.  Pan mode will pan the view to the next available region that has cursors not already visible in the view.\n\n\n\n\n\n\n\n\nParameters\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nreverse\n\n\nbool\n\n\nControls the direction of cursor focusing when either iterating or panning through cursors.\n\n\n\n\n\n\npan\n\n\nbool\n\n\nControls whether the command will run in pan mode or iterative mode.\n\n\n\n\n\n\n\n\n\n\n\n\nDefining Keymaps\n\n\nSetting up commands is basically the same for either pan or iterative commands.  The command can be bound in a forward or reverse direction and in iterative or pan mode.  It is usually useful to bind both forward and reverse variants for easier cursor navigation.\n\n\n    \n//////////////////////////////////\n\n    \n// Find Cursor: Iterative Find\n\n    \n//////////////////////////////////\n\n    \n{\n\n        \nkeys\n:\n \n[\nctrl+.\n],\n\n        \ncommand\n:\n \nfind_cursor\n,\n\n        \nargs\n:\n \n{\nreverse\n:\n \nfalse\n,\n \npan\n:\n \nfalse\n}\n\n    \n},\n\n    \n{\n\n        \nkeys\n:\n \n[\nctrl+shift+.\n],\n\n        \ncommand\n:\n \nfind_cursor\n,\n\n        \nargs\n:\n \n{\nreverse\n:\n \ntrue\n,\n \npan\n:\n \nfalse\n}\n\n    \n}\n\n\n\n\n\n\n    \n//////////////////////////////////\n\n    \n// Find Cursor: Panning Find\n\n    \n//////////////////////////////////\n\n    \n{\n\n        \nkeys\n:\n \n[\nctrl+.\n],\n\n        \ncommand\n:\n \nfind_cursor\n,\n\n        \nargs\n:\n \n{\nreverse\n:\n \nfalse\n,\n \npan\n:\n \ntrue\n}\n\n    \n},\n\n    \n{\n\n        \nkeys\n:\n \n[\nctrl+shift+.\n],\n\n        \ncommand\n:\n \nfind_cursor\n,\n\n        \nargs\n:\n \n{\nreverse\n:\n \ntrue\n,\n \npan\n:\n \ntrue\n}\n\n    \n}\n\n\n\n\n\n\nSettings\n\n\nThere is currently only one setting that can be used in FindCursor.\n\n\nfind_mode_timeout\n\n\nfind_mode_timeout\n controls how long after each command invocation that navigating through cursors will be allowed.  After the time out is reached, the cursors return to normal mode and the next invocation will only make them highly visible again.\n\n\n    \n// How long before find mode times out\n\n    \n// and cursors return to normal\n\n    \nfind_mode_timeout\n:\n \n3000", 
            "title": "User Guide"
        }, 
        {
            "location": "/usage/#user-guide", 
            "text": "Configuration and usage of FindCursor.", 
            "title": "User Guide"
        }, 
        {
            "location": "/usage/#getting-started", 
            "text": "Find cursor provides only one command, and it works best when bound to a shortcut.  Simply setup a  keymap  and you are ready to go.  Though if you prefer, you can add commands in the command palette, or menus.", 
            "title": "Getting Started"
        }, 
        {
            "location": "/usage/#command", 
            "text": "find_cursor   When the command is first invoked, all cursors will turn to block cursors and blink making them highly visible.  Subsequent invocations (if performed before timeout) will cycle through the cursors focusing them in the view.  The focus modes are iterative (the default) and pan mode.  Pan mode will pan the view to the next available region that has cursors not already visible in the view.     Parameters  Type  Description      reverse  bool  Controls the direction of cursor focusing when either iterating or panning through cursors.    pan  bool  Controls whether the command will run in pan mode or iterative mode.", 
            "title": "Command"
        }, 
        {
            "location": "/usage/#defining-keymaps", 
            "text": "Setting up commands is basically the same for either pan or iterative commands.  The command can be bound in a forward or reverse direction and in iterative or pan mode.  It is usually useful to bind both forward and reverse variants for easier cursor navigation.       ////////////////////////////////// \n     // Find Cursor: Iterative Find \n     ////////////////////////////////// \n     { \n         keys :   [ ctrl+. ], \n         command :   find_cursor , \n         args :   { reverse :   false ,   pan :   false } \n     }, \n     { \n         keys :   [ ctrl+shift+. ], \n         command :   find_cursor , \n         args :   { reverse :   true ,   pan :   false } \n     }        ////////////////////////////////// \n     // Find Cursor: Panning Find \n     ////////////////////////////////// \n     { \n         keys :   [ ctrl+. ], \n         command :   find_cursor , \n         args :   { reverse :   false ,   pan :   true } \n     }, \n     { \n         keys :   [ ctrl+shift+. ], \n         command :   find_cursor , \n         args :   { reverse :   true ,   pan :   true } \n     }", 
            "title": "Defining Keymaps"
        }, 
        {
            "location": "/usage/#settings", 
            "text": "There is currently only one setting that can be used in FindCursor.  find_mode_timeout  find_mode_timeout  controls how long after each command invocation that navigating through cursors will be allowed.  After the time out is reached, the cursors return to normal mode and the next invocation will only make them highly visible again.       // How long before find mode times out \n     // and cursors return to normal \n     find_mode_timeout :   3000", 
            "title": "Settings"
        }, 
        {
            "location": "/contributing/", 
            "text": "Contributing \n Support\n\n\nSteps for contributing and getting support.\n\n\n\n\nOverview\n\n\n\n\n\n\n\n\nSublime Versions\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nST3\n\n\nFully supported and actively maintained.\n\n\n\n\n\n\n\n\nContribution from the community is encouraged and can be done in a variety of ways:\n\n\n\n\nBug reports.\n\n\nReviewing code.\n\n\nCode patches via pull requests.\n\n\nDocumentation improvements via pull requests.\n\n\n\n\nBug Reports\n\n\n\n\n\n\nPlease \nread the documentation\n and \nsearch the issue tracker\n to try to find the answer to your question \nbefore\n posting an issue.\n\n\n\n\n\n\nWhen creating an issue on the repository, please provide as much info as possible:\n\n\n\n\nSublime Text build.\n\n\nOperating system.\n\n\nErrors in console.\n\n\nDetailed description of the problem.\n\n\nExamples for reproducing the error.  You can post pictures, but if specific text or code is required to reproduce the issue, please provide the text in a plain text format for easy copy/paste.\n\n\n\n\nThe more info provided the greater the chance someone will take the time to answer, implement, or fix the issue.\n\n\n\n\n\n\nBe prepared to answer questions and provide additional information if required.  Issues in which the creator refuses to respond to follow up questions will be marked as stale and closed.\n\n\n\n\n\n\nReviewing Code\n\n\nTake part in reviewing pull requests and/or reviewing direct commits.  Make suggestions to improve the code and discuss solutions to overcome weakness in the algorithm.\n\n\nPull Requests\n\n\nPull requests are welcome, and if you plan on contributing directly to the code, there are a couple of things to be mindful of.\n\n\nContinuous integration tests on are run on all pull requests and commits via Travis CI.  When making a pull request, the tests will automatically be run, and the request must pass to be accepted.  You can (and should) run these tests before pull requesting.  If it is not possible to run these tests locally, they will be run when the pull request is made, but it is strongly suggested that requesters make an effort to verify before requesting to allow for a quick, smooth merge.\n\n\nFeel free to use a virtual environment if you are concerned about installing any of the Python packages.  In the future, I may use tox, but as I currently only test on Python 3.3, I wanted to keep things simple.\n\n\nRunning Validation Tests\n\n\n\n\nTip\n\n\nIf you are running Sublime on a OSX or Linux/Unix system, you run all tests by by running the shell script (assuming you have installed your environment fulfills all requirements below):\n\n\nchmod +x run_tests.sh\n./run_tests.sh\n\n\n\n\n\n\n\nThere are a couple of dependencies that must be present before running the tests.\n\n\n\n\n\n\nAs \nST3\n is the only current actively supported version, Python 3.3 must be used to validate the tests.\n\n\n\n\n\n\nUnit tests are run with \nnose\n.  You can install nose via:\n\n\npip install nose\n\n\n\n\n\nThe tests should be run from the root folder of the plugin by using the following command:\n\n\nnosetests .\n\n\n\n\n\n\n\n\n\nLinting is performed on the entire project with \nflake8\n, \nflake8_docstrings\n, \npep8-naming\n.  These can be installed via:\n\n\npip install flake8\npip install flake8_docstrings\npip install pep8-naming\n\n\n\n\n\nLinting is performed with the following command:\n\n\nflake8 .\n\n\n\n\n\n\n\n\n\nDocumentation Improvements\n\n\nA ton of time has been not only creating and supporting this plugin, but also spent making this documentation.  If you feel it is still lacking, show your appreciation for the plugin by helping to improve the documentation.  Help with documentation is always appreciated and can be done via pull requests.  There shouldn\nt be any need to run validation tests if only updating documentation.\n\n\nI currently use a combination of using [mkdocs][mkdocs.org] with my own custom Python Markdown \nextensions\n to render the docs.  You can preview the docs if you install these two packages.  The command for previewing the docs is \nmkdocs serve\n.", 
            "title": "Contributing &amp; Support"
        }, 
        {
            "location": "/contributing/#contributing-support", 
            "text": "Steps for contributing and getting support.", 
            "title": "Contributing  Support"
        }, 
        {
            "location": "/contributing/#overview", 
            "text": "Sublime Versions  Description      ST3  Fully supported and actively maintained.     Contribution from the community is encouraged and can be done in a variety of ways:   Bug reports.  Reviewing code.  Code patches via pull requests.  Documentation improvements via pull requests.", 
            "title": "Overview"
        }, 
        {
            "location": "/contributing/#bug-reports", 
            "text": "Please  read the documentation  and  search the issue tracker  to try to find the answer to your question  before  posting an issue.    When creating an issue on the repository, please provide as much info as possible:   Sublime Text build.  Operating system.  Errors in console.  Detailed description of the problem.  Examples for reproducing the error.  You can post pictures, but if specific text or code is required to reproduce the issue, please provide the text in a plain text format for easy copy/paste.   The more info provided the greater the chance someone will take the time to answer, implement, or fix the issue.    Be prepared to answer questions and provide additional information if required.  Issues in which the creator refuses to respond to follow up questions will be marked as stale and closed.", 
            "title": "Bug Reports"
        }, 
        {
            "location": "/contributing/#reviewing-code", 
            "text": "Take part in reviewing pull requests and/or reviewing direct commits.  Make suggestions to improve the code and discuss solutions to overcome weakness in the algorithm.", 
            "title": "Reviewing Code"
        }, 
        {
            "location": "/contributing/#pull-requests", 
            "text": "Pull requests are welcome, and if you plan on contributing directly to the code, there are a couple of things to be mindful of.  Continuous integration tests on are run on all pull requests and commits via Travis CI.  When making a pull request, the tests will automatically be run, and the request must pass to be accepted.  You can (and should) run these tests before pull requesting.  If it is not possible to run these tests locally, they will be run when the pull request is made, but it is strongly suggested that requesters make an effort to verify before requesting to allow for a quick, smooth merge.  Feel free to use a virtual environment if you are concerned about installing any of the Python packages.  In the future, I may use tox, but as I currently only test on Python 3.3, I wanted to keep things simple.  Running Validation Tests   Tip  If you are running Sublime on a OSX or Linux/Unix system, you run all tests by by running the shell script (assuming you have installed your environment fulfills all requirements below):  chmod +x run_tests.sh\n./run_tests.sh   There are a couple of dependencies that must be present before running the tests.    As  ST3  is the only current actively supported version, Python 3.3 must be used to validate the tests.    Unit tests are run with  nose .  You can install nose via:  pip install nose  The tests should be run from the root folder of the plugin by using the following command:  nosetests .    Linting is performed on the entire project with  flake8 ,  flake8_docstrings ,  pep8-naming .  These can be installed via:  pip install flake8\npip install flake8_docstrings\npip install pep8-naming  Linting is performed with the following command:  flake8 .", 
            "title": "Pull Requests"
        }, 
        {
            "location": "/contributing/#documentation-improvements", 
            "text": "A ton of time has been not only creating and supporting this plugin, but also spent making this documentation.  If you feel it is still lacking, show your appreciation for the plugin by helping to improve the documentation.  Help with documentation is always appreciated and can be done via pull requests.  There shouldn t be any need to run validation tests if only updating documentation.  I currently use a combination of using [mkdocs][mkdocs.org] with my own custom Python Markdown  extensions  to render the docs.  You can preview the docs if you install these two packages.  The command for previewing the docs is  mkdocs serve .", 
            "title": "Documentation Improvements"
        }, 
        {
            "location": "/license/", 
            "text": "License\n\n\n\n\nFindCursor is released under the MIT license.\n\n\nCopyright \n 2014 - 2015 Isaac Muse \n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \nSoftware\n), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n\nTHE SOFTWARE IS PROVIDED \nAS IS\n, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE", 
            "title": "License"
        }, 
        {
            "location": "/license/#license", 
            "text": "FindCursor is released under the MIT license.  Copyright   2014 - 2015 Isaac Muse   Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the  Software ), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED  AS IS , WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE", 
            "title": "License"
        }
    ]
}